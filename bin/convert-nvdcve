#!/usr/bin/perl -w
use strict;
use Data::Dumper;
use JSON::XS;
use Storable qw(nfreeze thaw);
use IO::Compress::Gzip qw(gzip $GzipError);
use IO::Uncompress::Gunzip qw(gunzip $GunzipError);
use Carp;
use NIST::NVD::Update;
use Getopt::Long;

my $decimal_re = qr/^\d+$/;

my ( $nvd, $store, $cwe );

my %done             = ();
my %category_handler = ();

my %rating = (
    'Very High'         => 1,
    'High to Very High' => 2,
    'High'              => 3,
    'Medium to High'    => 4,
    'Medium'            => 5,
    'Low to Medium'     => 6,
    'Low'               => 7,
    'Very Low'          => 8,
);

my $result = GetOptions(
    "nvd=s"   => \$nvd,
    "cwe=s"   => \$cwe,
    "store=s" => \$store,
);

$nvd ||= 'nvdcve-1.1-recent.json.gz';
# https://cwe.mitre.org/data/xml/cwec_latest.xml.zip
#$cwe ||= 'cwec_v2.1.xml';

$store ||= 'SQLite3';

print STDERR "using store [$store]\n";

my $db_file = 'nvdcve-1.1.db';

my $NVD_Updater = NIST::NVD::Update->new(
    store    => $store,
    database => $db_file,
);

my $coder = JSON::XS->new->ascii->pretty->allow_nonref;

my $decompressed = '';
gunzip $nvd => \$decompressed or die "gunzip failed: $GunzipError\n";

my $cve_recent = $coder->decode ($decompressed);

print("CVE_data_numberOfCVEs: $cve_recent->{CVE_data_numberOfCVEs}",$/);
if( scalar @{$cve_recent->{CVE_Items}} == $cve_recent->{CVE_data_numberOfCVEs} ){
  print("received the advertised number of CVE items$/");
}else{
  print('$cve_recent->{CVE_data_numberOfCVEs} != scalar keys %{$cve_recent->{CVE_Items}}',$/);
}

my %vuln_software;
my $NVD_Entry_HASH = {};
foreach my $item (@{$cve_recent->{CVE_Items}}){
  my $cve_id = $item->{cve}->{CVE_data_meta}->{ID};
  $NVD_Entry_HASH->{$cve_id} = $item;

  # iterate over CPE matches, adding a mapping for those marked vulnerable
  if( exists( $item->{configurations}->{nodes} ) ){
    foreach my $node ( @{$item->{configurations}->{nodes}} ){
      if( exists $node->{cpe_match} ){
        foreach my $cpe_match ( @{$node->{cpe_match}} ){
          my $cpe23Uri = $cpe_match->{cpe23Uri};
          if( $cpe_match->{vulnerable} ){
            # add a mapping from this vulnerable cpe to this CVE
            $vuln_software{$cpe23Uri}->{$cve_id} = $item
          }
        }
      }
    }
  }
}

print "Writing CPE URNs to disk...";

$NVD_Updater->put_cpe([ keys %vuln_software ]);

print "Done.\n";

print "Writing NVD entries to disk...";

$NVD_Updater->put_nvd_entries($cve_recent->{CVE_Items});

print " Done.\n";

print "Writing CPE index to disk...";

$NVD_Updater->put_cve_idx_cpe( \%vuln_software );

print "Done.\n";


my %important_fields;

$important_fields{$_}++ foreach $NVD_Updater->{store}->_important_fields();

my $cwe_ids = $NVD_Updater->get_cwe_ids();


my %weaknesses;


my %close_regex = (
    Views             => qr:</Views>:,
    Categories        => qr:</Categories>:,
    Weaknesses        => qr:</Weaknesses>:,
    Compound_Elements => qr:</Compound_Elements>:,
);
my %open_regex = (
    Views             => qr:<Views>:,
    Categories        => qr:<Categories>:,
    Weaknesses        => qr:<Weaknesses>:,
    Compound_Elements => qr:<Compound_Elements>:,
);

$|++;

print("reading NVDs from file: $nvd...");

my $nvd_entries = $cve_recent->{CVE_Items};

print "Done.\n";

printf( 'read %i nvd entries'.$/, scalar keys @$nvd_entries );

print "Writing CPE URNs to disk...";

$NVD_Updater->put_cpe( [ keys %vuln_software ] );

print "Done.\n";

print "Writing NVD entries to disk...";

$NVD_Updater->put_nvd_entries($nvd_entries);

print " Done.\n";

my $cwe_data;

if( defined $cwe &&
    -f $cwe ){
	print "Processing CWE file...";

	$cwe_data = process_cwe_file($cwe);

	print "\nDone processing CWE file.\n";


	printf( "read \%i cwe Categories\n", scalar keys %{$cwe_data->{Category}} );
	printf( "read \%i cwe Weaknesses\n", scalar keys %{$cwe_data->{Weakness}} );
	printf( "read \%i cwe Views\n",      scalar keys %{$cwe_data->{View}} );

}

print "Writing CPE index to disk...";

$NVD_Updater->put_cve_idx_cpe( \%vuln_software );

print "Done.\n";

if( defined $cwe &&
    -f $cwe ){

	print "Writing CWE data to disk...";

	$NVD_Updater->put_cwe_data($cwe_data);

	print " Done.\n";

	print "Writing CWE index to disk...";

	$NVD_Updater->put_cwe_idx_cve($nvd_entries);

	$NVD_Updater->put_cwe_idx_cpe( \%weaknesses );

	print "Done.\n";

	print "Writing websec index to disk...";

	$NVD_Updater->update_websec_idx_cpe( \%weaknesses );

	print "Done\n";
}

sub process_cwe_file {

    my ($filename) = @_;

    my $CWE_Entry_HASH = {};

    my $iter = 0;

    my $element_body;

    my $cwe_fd;

    open( $cwe_fd, q{<}, $filename )
        or die qq{couldn't open "$filename": $!};

    my $content;
    {
        open( $cwe_fd, q{<}, $filename )
            or die qq{couldn't open "$filename": $!};
        my $oldslash = $/;
        local undef $/;
        $content = <$cwe_fd>;
        $/       = $oldslash;
    };

    my ($header) = ( $content =~ /^(.*?<Weakness_Catalog[^>]+>)/msg );
    my $footer = '</Weakness_Catalog>';

    $content = "";

    open( $cwe_fd, q{<}, $filename )
        or die qq{couldn't open "$filename": $!};

    my $current_element;
    my $function;

    my %parent_element = (
        View             => 'Views',
        Category         => 'Categories',
        Weakness         => 'Weaknesses',
        Compound_Element => 'Compound_Elements',
    );

    my $weakness_count = 0;

    while ( my $line = <$cwe_fd> ) {
        if (   $line =~ /(^.*?)<(View|Category|Weakness|Compound_Element)[> ]/
            || $line =~ m:(^.*?)</Weakness_Catalog>:    # last entry
            )
        {
            my $tail         = $1;
            my $next_element = $2;
            my $lcelement    = lc $next_element if $next_element;
            my $funcname;
            if ( !$current_element ) {
                $current_element = $next_element;
                $funcname        = "process_$lcelement";
                print STDERR "\nfunction: [$funcname]\n";
                $function = \&$funcname;
                $line =~ s/^$tail//;
                $content = $line;

                next;
            } elsif ( !$next_element ) {
            } elsif ( $current_element ne $next_element ) {

                my $cl_re = $close_regex{ $parent_element{$current_element} };
                my $op_re = $open_regex{ $parent_element{$next_element} };

                $content =~ s:$cl_re::;
                $content =~ s:$op_re::;
            }

            $content .= $tail;

            $element_body = $content;

            my $xml_string
                = (   "$header\n"
                    . "<$parent_element{$current_element}>\n"
                    . "$element_body\n"
                    . "</$parent_element{$current_element}>\n"
                    . "$footer\n" );

            die $current_element
                unless ( $current_element eq 'View'
                || $current_element eq 'Category'
                || $current_element eq 'Weakness'
                || $current_element eq 'Compound_Element' );

            print 'w'
                if $current_element eq 'Weakness'
                    && ++$weakness_count % 100 == 0;

            my ( $id, $element ) = $function->($xml_string);

            my $cwe_id;

            if ( $id =~ $decimal_re ) {
                $cwe_id = sprintf( 'CWE-%d', $id );
            } elsif ( $id =~ /^CWE-\d+$/ ) {
                $cwe_id = $id;
            } elsif ( $id eq 'compound_id' ) {

                # not yet implemented
                next;
            } else {
                die "id [$id] is unrecognized";
            }

            $CWE_Entry_HASH->{$current_element}->{$cwe_id} = $element;

            if ( exists( $cwe_ids->{$cwe_id} ) ) {

                # TODO: Update
            } else {
                my $frozen = nfreeze($element);

                $NVD_Updater->put_cwe(
                    cwe_id        => $id,
                    cwe_dump      => nfreeze($element),
                    transactional => 1,
                );

            }

            $iter++;

            $line =~ s/^$tail//;
            $content = $line;

            if ( $next_element && $current_element ne $next_element ) {
                $current_element = $next_element;
                $funcname        = "process_$lcelement";
                print STDERR "\nfunction: [$funcname]\n";

                $function = \&$funcname;
            }

        } else {
            $content .= $line;
        }

    }

    $NVD_Updater->{store}->_commit('put_cwe_insert');

    return $CWE_Entry_HASH;
}
